"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = activate;
exports.deactivate = deactivate;
const vscode = __importStar(require("vscode"));
const functionPicker_1 = require("./ui/functionPicker");
const scenarioGenerator_1 = require("./analyzer/scenarioGenerator");
const javaParserClass_1 = require("./analyzer/javaParserClass"); // Parser com busca em classe
const unitTestGenerator_1 = require("./analyzer/unitTestGenerator");
const mockGenerator_1 = require("./analyzer/mockGenerator");
function activate(context) {
    let disposable = vscode.commands.registerCommand('extension.analyzeJavaFunction', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) {
            vscode.window.showErrorMessage('Nenhum editor de texto ativo.');
            return;
        }
        const document = editor.document;
        const code = document.getText();
        const { name, level, className } = await (0, functionPicker_1.getFunctionFromUser)();
        if (!name) {
            vscode.window.showWarningMessage('Nome da fun√ß√£o n√£o informado.');
            return;
        }
        // NOVA VALIDA√á√ÉO: Tornar className obrigat√≥rio
        if (!className || className.trim() === '') {
            vscode.window.showWarningMessage('Nome da classe √© obrigat√≥rio.');
            return;
        }
        try {
            let parsedFunction;
            let searchResult;
            // Log de debug para cache
            const cacheStats = (0, javaParserClass_1.getCacheStats)();
            console.log(`Cache stats antes da busca: ${JSON.stringify(cacheStats)}`);
            // Sempre usar o parser com busca em classe (agora obrigat√≥rio)
            console.log(`Iniciando busca para: ${className.trim()}.${name}`);
            searchResult = await (0, javaParserClass_1.parseJavaFunctionInClass)(code, className.trim(), name);
            if (!searchResult.className) {
                // Mostrar erro com sugest√µes
                let errorMessage = searchResult.error || 'M√©todo n√£o encontrado';
                if (searchResult.suggestions && searchResult.suggestions.length > 0) {
                    errorMessage += `\n\nSugest√µes dispon√≠veis: ${searchResult.suggestions.join(', ')}`;
                }
                console.error(`Busca falhou: ${errorMessage}`);
                vscode.window.showErrorMessage(errorMessage);
                return;
            }
            console.log(`Busca bem-sucedida: ${searchResult.className}.${name}`);
            parsedFunction = searchResult.method;
            const decisionAnalysis = await (0, javaParserClass_1.analyzeDecisionBranches)(code, searchResult.className, name);
            // Gera mocks avan√ßados baseados nas fun√ß√µes chamadas com an√°lise detalhada das classes
            const advancedMockResult = await (0, mockGenerator_1.generateAdvancedMocks)(code, parsedFunction.calledFunctions);
            const mocks = advancedMockResult.basicMocks;
            const mockSetup = advancedMockResult.enhancedSetup;
            // Gera cen√°rios de teste baseados no n√≠vel selecionado
            const testSuite = scenarioGenerator_1.EnhancedScenarioGenerator.generateTestSuite(parsedFunction);
            // Filtra cen√°rios baseado no n√≠vel selecionado
            const filteredScenarios = filterScenariosByLevel(testSuite.scenarios, level);
            // Gera testes unit√°rios no padr√£o AAA
            const unitTestSuite = unitTestGenerator_1.UnitTestGenerator.generateUnitTestSuite({ ...testSuite, scenarios: filteredScenarios }, searchResult.className);
            // Tenta salvar o arquivo de testes unit√°rios
            let testFileCreated = false;
            try {
                testFileCreated = await saveUnitTestFile(unitTestSuite, document.uri);
            }
            catch (error) {
                console.warn('Erro ao salvar arquivo de testes:', error);
            }
            const output = vscode.window.createOutputChannel('Java Function Analyzer');
            output.clear();
            output.appendLine('='.repeat(60));
            // T√≠tulo sempre com classe e m√©todo
            output.appendLine(`AN√ÅLISE DO M√âTODO: ${searchResult.className}.${name}`);
            output.appendLine('='.repeat(60));
            // Informa√ß√µes sobre a busca (sempre presente agora)
            output.appendLine('\nüîç INFORMA√á√ïES DA BUSCA:');
            output.appendLine(`   Classe: ${searchResult.className}`);
            output.appendLine(`   M√©todo: ${name}`);
            output.appendLine(`   Status: Encontrado com sucesso`);
            // Informa√ß√µes b√°sicas da fun√ß√£o
            output.appendLine('\nüìã INFORMA√á√ïES B√ÅSICAS:');
            output.appendLine(`   Nome: ${parsedFunction.name}`);
            output.appendLine(`   Tipo de Retorno: ${parsedFunction.returnType}`);
            output.appendLine(`   Visibilidade: ${parsedFunction.visibility}`);
            output.appendLine(`   √â Est√°tico: ${parsedFunction.isStatic ? 'Sim' : 'N√£o'}`);
            output.appendLine(`   Complexidade Ciclom√°tica: ${parsedFunction.complexity}`);
            output.appendLine(`   Linhas de C√≥digo: ${parsedFunction.lines}`);
            // Anota√ß√µes
            if (parsedFunction.annotations.length > 0) {
                output.appendLine(`   Anota√ß√µes: ${parsedFunction.annotations.join(', ')}`);
            }
            // Exce√ß√µes
            if (parsedFunction.throwsExceptions.length > 0) {
                output.appendLine(`   Exce√ß√µes Declaradas: ${parsedFunction.throwsExceptions.join(', ')}`);
            }
            // Par√¢metros
            output.appendLine('\nüìù PAR√ÇMETROS:');
            if (parsedFunction.parameters.length === 0) {
                output.appendLine('   Nenhum par√¢metro');
            }
            else {
                parsedFunction.parameters.forEach((param, index) => {
                    output.appendLine(`   ${index + 1}. ${param.name} (${param.type})`);
                    if (param.annotations && param.annotations.length > 0) {
                        output.appendLine(`      Anota√ß√µes: ${param.annotations.join(', ')}`);
                    }
                });
            }
            // Vari√°veis locais
            output.appendLine('\nüîß VARI√ÅVEIS LOCAIS:');
            if (parsedFunction.localVariables.length === 0) {
                output.appendLine('   Nenhuma vari√°vel local');
            }
            else {
                parsedFunction.localVariables.forEach((variable, index) => {
                    let line = `   ${index + 1}. ${variable.name} (${variable.type})`;
                    if (variable.initialValue) {
                        line += ` = ${variable.initialValue}`;
                    }
                    output.appendLine(line);
                });
            }
            // Fun√ß√µes chamadas
            output.appendLine('\nüìû FUN√á√ïES CHAMADAS:');
            if (parsedFunction.calledFunctions.length === 0) {
                output.appendLine('   Nenhuma fun√ß√£o chamada');
            }
            else {
                parsedFunction.calledFunctions.forEach((func, index) => {
                    let line = `   ${index + 1}. ${func.methodName}`;
                    if (func.className) {
                        line += ` (${func.className})`;
                    }
                    if (func.parameters.length > 0) {
                        line += ` - Par√¢metros: ${func.parameters.join(', ')}`;
                    }
                    if (func.isStaticCall) {
                        line += ' [Chamada Est√°tica]';
                    }
                    output.appendLine(line);
                });
            }
            // Mocks sugeridos com an√°lise de classes
            output.appendLine('\nüé≠ MOCKS AVAN√áADOS COM AN√ÅLISE DE CLASSES:');
            if (mocks.length === 0) {
                output.appendLine('   Nenhum mock necess√°rio');
            }
            else {
                output.appendLine('   Mocks b√°sicos:');
                mocks.forEach((mock, index) => {
                    output.appendLine(`   ${index + 1}. ${mock}`);
                });
                if (mockSetup.length > 0) {
                    output.appendLine('\n   Setup avan√ßado com an√°lise de classes:');
                    mockSetup.forEach((setup) => {
                        output.appendLine(`   ${setup}`);
                    });
                }
                // Informa√ß√µes sobre an√°lise de classes
                if (advancedMockResult.classAnalysis.length > 0) {
                    output.appendLine('\n   üìä AN√ÅLISE DETALHADA DAS CLASSES:');
                    advancedMockResult.classAnalysis.forEach((classInfo, index) => {
                        output.appendLine(`   ${index + 1}. Classe: ${classInfo.className}`);
                        output.appendLine(`      Campos: ${classInfo.fields.length}`);
                        output.appendLine(`      Construtores: ${classInfo.constructors.length}`);
                        output.appendLine(`      M√©todos: ${classInfo.methods.length}`);
                        output.appendLine(`      Depend√™ncias: ${classInfo.dependencies.length}`);
                    });
                }
            }
            // Configura√ß√£o de teste
            output.appendLine('\n‚öôÔ∏è CONFIGURA√á√ÉO DE TESTE:');
            output.appendLine('   Imports necess√°rios:');
            testSuite.imports.forEach(imp => {
                output.appendLine(`     ${imp}`);
            });
            output.appendLine('\n   C√≥digo de setup:');
            testSuite.setupCode.forEach(setup => {
                output.appendLine(`     ${setup}`);
            });
            if (testSuite.dependencies.length > 0) {
                output.appendLine('\n   Depend√™ncias:');
                testSuite.dependencies.forEach(dep => {
                    output.appendLine(`     ${dep}`);
                });
            }
            // Informa√ß√µes detalhadas das classes analisadas
            if (advancedMockResult.classAnalysis.length > 0) {
                output.appendLine('\nüèóÔ∏è INFORMA√á√ïES DETALHADAS DAS CLASSES:');
                advancedMockResult.classAnalysis.forEach((classInfo, index) => {
                    output.appendLine(`\n   üì¶ CLASSE ${index + 1}: ${classInfo.className}`);
                    // Campos da classe
                    if (classInfo.fields.length > 0) {
                        output.appendLine(`   üìã Campos (${classInfo.fields.length}):`);
                        classInfo.fields.forEach((field, fieldIndex) => {
                            let fieldInfo = `     ${fieldIndex + 1}. ${field.visibility} ${field.type} ${field.name}`;
                            if (field.isStatic)
                                fieldInfo += ' (static)';
                            if (field.isFinal)
                                fieldInfo += ' (final)';
                            if (field.initialValue)
                                fieldInfo += ` = ${field.initialValue}`;
                            if (field.annotations.length > 0) {
                                fieldInfo += ` [@${field.annotations.join(', @')}]`;
                            }
                            output.appendLine(fieldInfo);
                        });
                    }
                    // Construtores da classe
                    if (classInfo.constructors.length > 0) {
                        output.appendLine(`   üî® Construtores (${classInfo.constructors.length}):`);
                        classInfo.constructors.forEach((constructor, constIndex) => {
                            const params = constructor.parameters.map(p => `${p.type} ${p.name}`).join(', ');
                            let constInfo = `     ${constIndex + 1}. ${constructor.visibility} ${classInfo.className}(${params})`;
                            if (constructor.annotations.length > 0) {
                                constInfo += ` [@${constructor.annotations.join(', @')}]`;
                            }
                            output.appendLine(constInfo);
                        });
                    }
                    // M√©todos da classe
                    if (classInfo.methods.length > 0) {
                        output.appendLine(`   ‚öôÔ∏è M√©todos (${classInfo.methods.length}):`);
                        classInfo.methods.forEach((method, methodIndex) => {
                            const params = method.parameters.map(p => `${p.type} ${p.name}`).join(', ');
                            let methodInfo = `     ${methodIndex + 1}. ${method.visibility} ${method.returnType} ${method.name}(${params})`;
                            if (method.isStatic)
                                methodInfo += ' (static)';
                            if (method.isAbstract)
                                methodInfo += ' (abstract)';
                            if (method.annotations.length > 0) {
                                methodInfo += ` [@${method.annotations.join(', @')}]`;
                            }
                            if (method.throwsExceptions.length > 0) {
                                methodInfo += ` throws ${method.throwsExceptions.join(', ')}`;
                            }
                            output.appendLine(methodInfo);
                        });
                    }
                    // Depend√™ncias da classe
                    if (classInfo.dependencies.length > 0) {
                        output.appendLine(`   üìö Depend√™ncias (${classInfo.dependencies.length}):`);
                        classInfo.dependencies.forEach((dep, depIndex) => {
                            output.appendLine(`     ${depIndex + 1}. ${dep}`);
                        });
                    }
                });
            }
            // An√°lise de Ramos de Decis√£o
            output.appendLine('\nüîÄ AN√ÅLISE DE RAMOS DE DECIS√ÉO:');
            output.appendLine(`   Total de ramos: ${decisionAnalysis.totalBranches}`);
            output.appendLine(`   Complexidade Ciclom√°tica: ${decisionAnalysis.cyclomaticComplexity}`);
            decisionAnalysis.scenarios.forEach((scenario, index) => {
                output.appendLine(`\n   üß© CEN√ÅRIO ${index + 1}: ${scenario.scenario}`);
                output.appendLine(`      Cobertura: ${scenario.coverage} ramos`);
                output.appendLine(`      N√≠vel de risco: ${scenario.riskLevel.toUpperCase()}`);
                scenario.branches.forEach((branch, idx) => {
                    output.appendLine(`        ${idx + 1}. [${branch.type}] ${branch.condition}`);
                    output.appendLine(`           Linha: ${branch.startLine} ‚Üí ${branch.endLine}`);
                    output.appendLine(`           Complexidade: ${branch.complexity}`);
                    if (branch.calledFunctions.length > 0) {
                        output.appendLine(`           Fun√ß√µes chamadas: ${branch.calledFunctions.map(f => f.methodName).join(', ')}`);
                    }
                });
            });
            // Cen√°rios de teste
            output.appendLine('\nüß™ CEN√ÅRIOS DE TESTE:');
            output.appendLine(`   Total de cen√°rios gerados: ${testSuite.scenarios.length}`);
            output.appendLine(`   Cen√°rios filtrados (n√≠vel ${level}): ${filteredScenarios.length}`);
            const categoryCounts = getCategoryCounts(filteredScenarios);
            Object.entries(categoryCounts).forEach(([category, count]) => {
                const categoryNames = {
                    'happy-path': 'Caminho Feliz',
                    'edge-case': 'Casos Extremos',
                    'error-case': 'Casos de Erro',
                    'boundary': 'Valores Limite'
                };
                output.appendLine(`   ${categoryNames[category]}: ${count}`);
            });
            // Detalhes dos cen√°rios
            filteredScenarios.forEach((scenario, index) => {
                output.appendLine(`\n   üìã CEN√ÅRIO ${index + 1}: ${scenario.name}`);
                output.appendLine(`      Categoria: ${scenario.category}`);
                output.appendLine(`      Descri√ß√£o: ${scenario.description}`);
                output.appendLine(`      Comportamento Esperado: ${scenario.expectedBehavior}`);
                output.appendLine(`      Entradas:`);
                Object.entries(scenario.inputs).forEach(([key, value]) => {
                    output.appendLine(`        ${key}: ${value}`);
                });
                if (scenario.mockSetup.length > 0) {
                    output.appendLine(`      Mock Setup:`);
                    scenario.mockSetup.forEach((mock) => {
                        output.appendLine(`        ${mock}`);
                    });
                }
                output.appendLine(`      Asser√ß√µes:`);
                scenario.assertions.forEach((assertion) => {
                    output.appendLine(`        ${assertion}`);
                });
            });
            output.appendLine('\n' + '='.repeat(60));
            output.appendLine(`AN√ÅLISE CONCLU√çDA - ${new Date().toLocaleString()}`);
            output.appendLine('='.repeat(60));
            // Informa√ß√µes sobre o arquivo de testes gerado
            if (testFileCreated) {
                output.appendLine('\nüìÅ ARQUIVO DE TESTES GERADO:');
                output.appendLine(`   Arquivo: ${searchResult.className}Test.java`);
                output.appendLine(`   Localiza√ß√£o: pasta test/`);
                output.appendLine(`   Padr√£o: AAA (Arrange, Act, Assert)`);
                output.appendLine(`   Total de testes: ${unitTestSuite.tests.length}`);
            }
            output.appendLine('='.repeat(60));
            output.show();
            // Resumo final da an√°lise
            output.appendLine('\nüìä RESUMO FINAL DA AN√ÅLISE:');
            output.appendLine('='.repeat(60));
            if (searchResult) {
                output.appendLine(`‚úÖ M√©todo ${searchResult.className}.${name} encontrado com sucesso`);
            }
            output.appendLine(`üìã Cen√°rios gerados: ${filteredScenarios.length} (n√≠vel ${level})`);
            output.appendLine(`üîÄ Ramos analisados: ${decisionAnalysis.totalBranches}`);
            output.appendLine(`üìà Complexidade Ciclom√°tica: ${decisionAnalysis.cyclomaticComplexity}`);
            output.appendLine(`üèóÔ∏è Classes analisadas: ${advancedMockResult.classAnalysis.length}`);
            if (testFileCreated) {
                output.appendLine(`üìÅ Arquivo de testes gerado: ${searchResult.className}Test.java`);
            }
            output.appendLine('='.repeat(60));
            // Mensagem de sucesso simplificada
            vscode.window.showInformationMessage(`An√°lise conclu√≠da! ${filteredScenarios.length} cen√°rios gerados (n√≠vel ${level}).`);
        }
        catch (err) {
            const error = err;
            vscode.window.showErrorMessage(`Erro na an√°lise: ${error.message}`);
            console.error('Erro detalhado:', error);
        }
    });
    context.subscriptions.push(disposable);
    // Comando para limpar cache do parser
    let clearCacheDisposable = vscode.commands.registerCommand('extension.clearParserCache', () => {
        (0, javaParserClass_1.clearParserCache)();
        const stats = (0, javaParserClass_1.getCacheStats)();
        vscode.window.showInformationMessage(`Cache limpo! Estat√≠sticas: ${JSON.stringify(stats)}`);
    });
    context.subscriptions.push(clearCacheDisposable);
}
function filterScenariosByLevel(scenarios, level) {
    switch (level) {
        case 1:
            // N√≠vel 1: Apenas cen√°rios b√°sicos de caminho feliz
            return scenarios.filter(s => s.category === 'happy-path').slice(0, 3);
        case 2:
            // N√≠vel 2: Caminho feliz + casos extremos b√°sicos
            return scenarios.filter(s => s.category === 'happy-path' || s.category === 'edge-case').slice(0, 8);
        case 3:
            // N√≠vel 3: Todos exceto alguns casos de erro complexos
            return scenarios.filter(s => s.category !== 'error-case' || scenarios.indexOf(s) < 5);
        case 4:
            // N√≠vel 4: Todos os cen√°rios
            return scenarios;
        default:
            return scenarios.filter(s => s.category === 'happy-path').slice(0, 3);
    }
}
function getCategoryCounts(scenarios) {
    const counts = {};
    scenarios.forEach(scenario => {
        counts[scenario.category] = (counts[scenario.category] || 0) + 1;
    });
    return counts;
}
async function saveUnitTestFile(unitTestSuite, documentUri) {
    try {
        // Obt√©m o diret√≥rio do arquivo atual
        const currentDir = vscode.Uri.file(vscode.workspace.getWorkspaceFolder(documentUri)?.uri.fsPath || '');
        // Define o caminho para a pasta test
        const testDir = vscode.Uri.joinPath(currentDir, 'src', 'test');
        // Verifica se existe a pasta test, se n√£o existir, cria
        try {
            await vscode.workspace.fs.stat(testDir);
            console.log('Pasta test j√° existe');
        }
        catch (error) {
            // Pasta test n√£o existe, vamos criar
            console.log('Pasta test n√£o encontrada, criando...');
            try {
                await vscode.workspace.fs.createDirectory(testDir);
                console.log('Pasta test criada com sucesso');
            }
            catch (createError) {
                console.error('Erro ao criar pasta test:', createError);
                return false;
            }
        }
        // Gera o conte√∫do do arquivo de teste
        const testContent = unitTestGenerator_1.UnitTestGenerator.generateJavaTestFile(unitTestSuite);
        // Define o nome do arquivo
        const testFileName = `${unitTestSuite.className}Test.java`;
        const testFilePath = vscode.Uri.joinPath(testDir, testFileName);
        // Converte o conte√∫do para Uint8Array
        const contentBytes = new TextEncoder().encode(testContent);
        // Salva o arquivo
        await vscode.workspace.fs.writeFile(testFilePath, contentBytes);
        console.log(`Arquivo de testes criado: ${testFilePath.fsPath}`);
        return true;
    }
    catch (error) {
        console.error('Erro ao salvar arquivo de testes:', error);
        return false;
    }
}
function deactivate() { }
//# sourceMappingURL=extension.js.map